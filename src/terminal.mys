from os import env
from os import OsError

c"""source-before-namespace
#include <sys/ioctl.h>
"""

@enum
class GraphicsProtocol:
    Kitty
    ITerm
    Sixel
    Text

class Dimensions:
    width: i64
    height: i64

class Size:
    cells: Dimensions
    pixels: Dimensions
    cell_pixels: Dimensions

class KittyGraphicsInfo:
    is_supported: bool
    transmission_mediums: [string]

class SixelGraphicsInfo:
    is_supported: bool

class ITermGraphicsInfo:
    is_supported: bool

class GraphicsInfo:
    has_true_color: bool
    sixel: SixelGraphicsInfo
    kitty: KittyGraphicsInfo
    iterm: ITermGraphicsInfo

class Info:
    size: Size
    graphics: GraphicsInfo

def get_size() -> Size:
    """Get terminal size.

    """

    rows = 0
    columns = 0
    width = 0
    height = 0
    ok = False

    c"""
    struct winsize sz;
    if (ioctl(0, TIOCGWINSZ, &sz) == 0) {
        rows = sz.ws_row;
        columns = sz.ws_col;
        width = sz.ws_xpixel;
        height = sz.ws_ypixel;
        ok = true;
    }
    """

    if not ok:
        raise OsError("Failed to get terminal window size.")

    size = Size(Dimensions(columns, rows), None, None)

    if width > 0 and height > 0:
        size.pixels = Dimensions(width, height)
        size.cell_pixels = Dimensions(width / columns, height / rows)

    return size

def get_graphics_info() -> GraphicsInfo:
    """Get graphics info.

    """

    return GraphicsInfo(env().get("COLORTERM", None) == "truecolor",
                        get_sixel_graphics_info(),
                        get_kitty_graphics_info(),
                        get_iterm_graphics_info())

def get_sixel_graphics_info() -> SixelGraphicsInfo:
    """Get Sixel graphics info.

    """

    return SixelGraphicsInfo(False)

def get_kitty_graphics_info() -> KittyGraphicsInfo:
    """Get Kitty graphics info.

    """

    term = env().get("TERM", None)
    is_supported = term is not None and "kitty" in term
    transmission_mediums = []

    if is_supported:
        transmission_mediums.append("direct")

    return KittyGraphicsInfo(is_supported, transmission_mediums)

def get_iterm_graphics_info() -> ITermGraphicsInfo:
    """Get iTerm graphics info.

    """

    program = env().get("TERM_PROGRAM", None)
    is_supported = False

    if program is not None:
        for pattern in ["iTerm", "WezTerm", "mintty"]:
            if pattern in program:
                is_supported = True

    return ITermGraphicsInfo(is_supported)

def get_info() -> Info:
    """Get terminal info.

    """

    return Info(get_size(), get_graphics_info())

def get_preferred_graphics_protocol() -> GraphicsProtocol:
    """Get preferred graphics protocol.

    """

    graphics_info = get_graphics_info()

    if graphics_info.kitty.is_supported:
        return GraphicsProtocol.Kitty
    elif graphics_info.iterm.is_supported:
        return GraphicsProtocol.ITerm
    elif graphics_info.sixel.is_supported:
        return GraphicsProtocol.Sixel
    else:
        return GraphicsProtocol.Text

@test
def test_get_info():
    try:
        get_info()
    except OsError:
        pass

@test
def test_get_preferred_graphics_protocol():
    protocol = get_preferred_graphics_protocol()
    assert protocol in [
        GraphicsProtocol.Kitty,
        GraphicsProtocol.ITerm,
        GraphicsProtocol.Sixel,
        GraphicsProtocol.Text
    ]
